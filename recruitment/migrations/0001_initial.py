# Generated by Django 4.2.7 on 2025-09-24 14:07

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import recruitment.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('APPLICANT', 'Applicant'), ('OFFICER', 'Recruitment Officer'), ('ADMIN', 'Administrator')], db_index=True, default='APPLICANT', max_length=16)),
                ('last_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApplicantProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=150)),
                ('dob', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other / Prefer not to say')], max_length=1)),
                ('nid_number', models.CharField(max_length=30, unique=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to=recruitment.models.applicant_photo_path)),
                ('address', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=30)),
                ('highest_education_level', models.IntegerField(choices=[(12, 'Grade 12'), (13, 'Tertiary – Certificate/Diploma'), (16, 'Tertiary – Bachelor'), (18, 'Tertiary – Postgraduate')], default=12, help_text='Used for baseline eligibility; documents provide proof.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'applicant_profiles',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('SHORTLISTED', 'Shortlisted'), ('REJECTED', 'Rejected'), ('SELECTED', 'Selected')], db_index=True, default='DRAFT', max_length=20)),
                ('applied_unit', models.CharField(blank=True, max_length=120)),
                ('auto_screen_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('manual_adjustment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('test_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('interview_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('total_score', models.DecimalField(db_index=True, decimal_places=2, default=Decimal('0.00'), max_digits=7)),
                ('eligibility_passed', models.BooleanField(default=False)),
                ('disqualification_reason', models.TextField(blank=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='recruitment.applicantprofile')),
            ],
            options={
                'db_table': 'applications',
                'ordering': ['-total_score', 'id'],
            },
        ),
        migrations.CreateModel(
            name='InterviewSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_at', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=200)),
                ('panel_name', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('COMPLETED', 'Completed'), ('NO_SHOW', 'No Show')], default='SCHEDULED', max_length=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interviews', to='recruitment.application')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_interviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'interview_schedules',
                'ordering': ['scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
            ],
            options={
                'db_table': 'geo_provinces',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RecruitmentCycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('intake_year', models.PositiveIntegerField()),
                ('rec_type', models.CharField(choices=[('REGULAR', 'Regular'), ('RESERVE', 'Reserve'), ('SPECIAL', 'Specialized Units')], db_index=True, default='REGULAR', max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False)),
                ('min_age', models.PositiveSmallIntegerField(default=18, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(60)])),
                ('max_age', models.PositiveSmallIntegerField(default=30, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(60)])),
                ('min_education_level', models.IntegerField(choices=[(12, 'Grade 12'), (13, 'Tertiary – Certificate/Diploma'), (16, 'Tertiary – Bachelor'), (18, 'Tertiary – Postgraduate')], default=12)),
                ('quotas', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_cycles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'recruitment_cycles',
                'ordering': ['-intake_year', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('instructions', models.TextField(blank=True)),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('max_score', models.DecimalField(decimal_places=2, default=Decimal('100.00'), max_digits=6)),
                ('max_attempts', models.PositiveSmallIntegerField(default=1)),
                ('opens_at', models.DateTimeField()),
                ('closes_at', models.DateTimeField()),
                ('is_published', models.BooleanField(default=False)),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='recruitment.recruitmentcycle')),
            ],
            options={
                'db_table': 'tests',
                'ordering': ['-opens_at'],
            },
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('SUBMITTED', 'Submitted'), ('GRADED', 'Graded')], default='IN_PROGRESS', max_length=12)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to='recruitment.application')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='recruitment.test')),
            ],
            options={
                'db_table': 'test_attempts',
            },
        ),
        migrations.CreateModel(
            name='ScreeningAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('manual_adjustment', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=6)),
                ('reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screening_actions', to='recruitment.application')),
                ('by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'screening_actions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('points', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=5)),
                ('order', models.PositiveIntegerField(db_index=True, default=0)),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='recruitment.test')),
            ],
            options={
                'db_table': 'test_questions',
                'ordering': ['order', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ntype', models.CharField(choices=[('INFO', 'Info'), ('APPLICATION', 'Application'), ('SHORTLIST', 'Shortlist'), ('TEST', 'Test'), ('INTERVIEW', 'Interview'), ('RESULT', 'Result')], db_index=True, default='INFO', max_length=12)),
                ('title', models.CharField(max_length=160)),
                ('body', models.TextField(blank=True)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ref_model', models.CharField(blank=True, max_length=60)),
                ('ref_id', models.PositiveIntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InterviewScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('interviewer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='interview_scores', to=settings.AUTH_USER_MODEL)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='recruitment.interviewschedule')),
            ],
            options={
                'db_table': 'interview_scores',
            },
        ),
        migrations.CreateModel(
            name='FinalSelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(db_index=True)),
                ('total_score_snapshot', models.DecimalField(decimal_places=2, max_digits=7)),
                ('approved_at', models.DateTimeField(auto_now_add=True)),
                ('is_published', models.BooleanField(default=False)),
                ('offer_letter', models.FileField(blank=True, null=True, upload_to=recruitment.models.offer_letter_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='final_selection', to='recruitment.application')),
                ('approved_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_selections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'final_selections',
                'ordering': ['rank'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doc_type', models.CharField(choices=[('G12_CERT', 'Grade 12 Certificate'), ('BIRTH_CERT', 'Birth Certificate'), ('NID_PASSPORT', 'NID/Passport'), ('MED_CLEAR', 'Medical Clearance'), ('POL_CLEAR', 'Police Clearance'), ('CHAR_REF', 'Character Reference'), ('TERTIARY', 'Tertiary Qualification')], db_index=True, max_length=20)),
                ('file', models.FileField(upload_to=recruitment.models.document_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png'])])),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('verify_status', models.CharField(choices=[('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=10)),
                ('verification_note', models.TextField(blank=True)),
                ('applicant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='recruitment.applicantprofile')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'applicant_documents',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('province', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='districts', to='recruitment.province')),
            ],
            options={
                'db_table': 'geo_districts',
                'ordering': ['province__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=1000)),
                ('is_correct', models.BooleanField(default=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='recruitment.question')),
            ],
            options={
                'db_table': 'test_choices',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('CREATE', 'Create'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('SHORTLIST', 'Shortlist'), ('APPROVE', 'Approve'), ('REJECT', 'Reject'), ('SCORE', 'Score'), ('EXPORT', 'Export')], db_index=True, max_length=12)),
                ('entity', models.CharField(help_text='Model name or domain entity', max_length=80)),
                ('entity_id', models.CharField(blank=True, max_length=64)),
                ('payload', models.JSONField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'audit_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AttemptAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_correct', models.BooleanField(default=False)),
                ('awarded_points', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='recruitment.testattempt')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recruitment.question')),
                ('selected_choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recruitment.choice')),
            ],
            options={
                'db_table': 'test_attempt_answers',
            },
        ),
        migrations.CreateModel(
            name='ApplicationEligibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_ok', models.BooleanField(default=False)),
                ('education_ok', models.BooleanField(default=False)),
                ('medical_ok', models.BooleanField(default=False)),
                ('police_ok', models.BooleanField(default=False)),
                ('duplicates_ok', models.BooleanField(default=True)),
                ('result', models.CharField(choices=[('PASS', 'Pass'), ('FAIL', 'Fail')], default='FAIL', max_length=4)),
                ('details', models.JSONField(blank=True, null=True)),
                ('run_at', models.DateTimeField(auto_now_add=True)),
                ('application', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='eligibility', to='recruitment.application')),
            ],
            options={
                'db_table': 'application_eligibility',
            },
        ),
        migrations.AddField(
            model_name='application',
            name='cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applications', to='recruitment.recruitmentcycle'),
        ),
        migrations.AddField(
            model_name='applicantprofile',
            name='district',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recruitment.district'),
        ),
        migrations.AddField(
            model_name='applicantprofile',
            name='province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recruitment.province'),
        ),
        migrations.AddField(
            model_name='applicantprofile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['test', 'application', 'status'], name='test_attemp_test_id_9cfba9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testattempt',
            unique_together={('test', 'application')},
        ),
        migrations.AlterUniqueTogether(
            name='test',
            unique_together={('cycle', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='recruitmentcycle',
            unique_together={('intake_year', 'name', 'rec_type')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user', 'is_read', 'ntype'], name='notificatio_user_id_dc2a8e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='interviewscore',
            unique_together={('schedule', 'interviewer')},
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['doc_type', 'verify_status'], name='applicant_d_doc_typ_83ede9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='document',
            unique_together={('applicant', 'doc_type')},
        ),
        migrations.AlterUniqueTogether(
            name='district',
            unique_together={('province', 'name')},
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['action', 'entity'], name='audit_logs_action_5fd1bf_idx'),
        ),
        migrations.AddIndex(
            model_name='auditlog',
            index=models.Index(fields=['created_at'], name='audit_logs_created_262184_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attemptanswer',
            unique_together={('attempt', 'question')},
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['cycle', 'status'], name='application_cycle_i_fedbb2_idx'),
        ),
        migrations.AddIndex(
            model_name='application',
            index=models.Index(fields=['cycle', 'total_score'], name='application_cycle_i_a4dfc5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='application',
            unique_together={('applicant', 'cycle')},
        ),
    ]
